package game

import (
	"bufio"
	"encoding/json"
	"errors"
	"fmt"
	"math/rand"
	"os"
	"strconv"
	"strings"
	"time"
)

type GameResult struct {
	Level        string    `json:"level"`
	MaxNumber    int       `json:"maxNumber"`
	AttemptsUsed int       `json:"attemptsUsed"`
	Win          bool      `json:"win"`
	Timestamp    string `json:"timestamp"`
}

// –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã
func StartGame() (random int, attempts int, levelGame string) {
	fmt.Println("–í—ã –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É \"–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ\"")
	fmt.Println("–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–≤–µ–Ω—è:")
	fmt.Println("1 - easy; 2 - medium; 3 - hard")

	reader := bufio.NewReader(os.Stdin)
	var number int
	var err error

	for {
		input, _ := reader.ReadString('\n')
		input = strings.TrimSpace(input)
		number, err = strconv.Atoi(input)
		if err != nil {
			fmt.Println("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
			continue	
		}

		random, attempts, levelGame, err = Complexity(number)
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞:", err)
			fmt.Println("–í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π")
			fmt.Println("1 - easy; 2 - medium; 3 - hard")
			continue
		}
		break
	}
	return random, attempts, levelGame

}

// –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã
func Game(randomNumber int, attempts int) (bool, int) {
	listAttempts := make([]int, 0)
	fmt.Println("–£ –≤–∞—Å –≤—Å–µ–≥–æ", attempts, "–ø–æ–ø—ã—Ç–æ–∫")
	fmt.Println("–ù—É–∂–Ω–æ —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ", randomNumber)
	rand.Seed(time.Now().UnixNano())
	random := rand.Intn(randomNumber) + 1
	reader := bufio.NewReader(os.Stdin)
	var attUsed int
	for attUsed = 1; attempts > 0; attUsed++ {
		fmt.Print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —á–∏—Å–ª–æ: ")
		input, _ := reader.ReadString('\n')
		input = strings.TrimSpace(input)
		s := strings.ReplaceAll(input, " ", "")
		guess, err := strconv.Atoi(s)
		if err != nil {
			fmt.Println("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ")
			continue
		}
		listAttempts = append(listAttempts, guess)
		if random < guess {
			fmt.Println("–°–µ–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µüëá")
			fmt.Println(LastAppempts(listAttempts))
			Tips(random, guess)
		} else if random > guess{
			fmt.Println("–°–µ–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µüëÜ")
			fmt.Println(LastAppempts(listAttempts))
			Tips(random, guess)
		} else {
			fmt.Println("–í—ã —É–≥–∞–¥–∞–ª–∏!üôå")
			return true, attUsed
		}
		attempts--
		if attempts > 0 {
			fmt.Println("–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å", attempts, "–ø–æ–ø—ã—Ç–æ–∫")
		}
		if attempts == 0 {
			fmt.Println("–ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å")
			fmt.Println("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!üò¢")
			fmt.Println("–ê –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±—ã–ª", random)
			return false, attUsed
		}
	}
	return false, attUsed
}

// –ø–æ–¥—Å–∫–∞–∑–∫–∏
func Tips(random int, guess int) {
	diff := random - guess
	if diff < 0 {
		diff = -diff
	}
	if diff <= 5 {
		fmt.Println("–ì–æ—Ä—è—á–æ üî•")
	} else if diff <= 15 {
		fmt.Println("–¢–µ–ø–ª–æ  üôÇ")
	} else {
		fmt.Println("–•–æ–ª–æ–¥–Ω–æ ‚ùÑÔ∏è")
	}
}

// –ø—Ä–æ—à–ª—ã–µ –ø–æ–ø—ã—Ç–∫–∏
func LastAppempts(attempts []int) string {
	var s []string

	for _, v := range attempts {
		s = append(s, strconv.Itoa(v))
	}
	result := strings.Join(s, ", ")
	return fmt.Sprintf("–†–∞–Ω–µ–µ –≤—ã –≤–≤–µ–ª–∏ %s", result)
}


// —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–≥—Ä—ã
func Complexity(level int) (random int, attempts int, levelGame string,  err error) {
	switch level {
	case 1:
		random = 50
		attempts = 15
		levelGame = "easy"
	case 2:
		random = 100
		attempts = 10
		levelGame = "medium"
	case 3:
		random = 200
		attempts = 5
		levelGame = "hurd"
	default:
		err = fmt.Errorf("—Ç–∞–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–µ—Ç")
	}
	return random, attempts, levelGame, err
}

// –ø–æ–≤—Ç–æ—Ä –∏–≥—Ä—ã
func GameAgain() (start bool) {
	fmt.Println("–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å? 1 - –¥–∞; 0 - –Ω–µ—Ç")
	reader := bufio.NewReader(os.Stdin)
	for {
		input, _ := reader.ReadString('\n')
		input = strings.TrimSpace(input)
		s := strings.ReplaceAll(input, " ", "")
		num, err := strconv.Atoi(s)
		if err != nil {
			fmt.Println("–í–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 0")
			continue
		}
		if num == 1 {
			return  true
		} else if num == 0 {
			return false
		}
	}
}

// —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
func SaveResult(result GameResult) error {
	const filePath = "../../storage/results.json"

	var results []GameResult

	// –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏ —á—Ç–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	data, err := os.ReadFile(filePath)
	if err != nil {
		// –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–µ –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É, –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
		if errors.Is(err, os.ErrNotExist) {
			fmt.Println("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.")
		} else {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª: %w", err)
		}
	}

	// –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –µ–≥–æ
	if len(data) > 0 {
		if err := json.Unmarshal(data, &results); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON: %w", err)
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	results = append(results, result)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
	newData, err := json.MarshalIndent(results, "", "  ")
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à–∞–ª–∏–Ω–≥–µ: %w", err)
	}

	if err := os.WriteFile(filePath, newData, 0644); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: %w", err)
	}

	return nil
}

